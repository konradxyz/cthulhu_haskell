#ifndef CTHULHU_GEN_H_
#define CTHULHU_GEN_H_
#define START_ENV_SIZE 2
#define START_LABEL 1
#define FINAL_LABEL 86
#include "static/seq/seq.h"
void executeContext(std::unique_ptr<seq::Context>&& context) {
while ( context != nullptr ) {
switch (context->nextInstruction) {
case 0: /*call*/
SKIP
ALLOC_PARAMS(0)
GLOBAL_FORK(82, 1, 4)
RET
case 1: /*entry_point*/
SKIP
LOAD_COPY(0)
STORE(1)
ALLOC_PARAMS(0)
CALL(0, 3)
case 3:
SKIP
ADD_PARAM_MOVE(1, 2)
case 2:
SKIP
RET
case 4: /*exists_queen_seen*/
SKIP
WAIT(1, 14)
case 14:
SKIP
LOAD_COPY(1)
JMP_CASE({6 COMMA 7})
case 6:
SKIP
STORE_FIELD(0,3)
STORE_FIELD(1,2)
LOAD_COPY(0)
STORE(4)
LOAD_COPY(3)
STORE(5)
WAIT(0, 13)
case 13:
SKIP
ARITH(ADD(ENV_INT(0), 1))
STORE_ARITH(6)
LOAD_COPY(2)
STORE(7)
ALLOC_PARAMS(14)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
PREPARE_PARAM_MOVE(6, 2)
PREPARE_PARAM_MOVE(7, 3)
CALL(53, 12)
case 12:
SKIP
ARITH_LOAD_ACC
JMP_IF_ZERO(8)
ARITH(1)
LOAD_ARITH
RET
JMP(9)
case 8:
SKIP
WAIT(0, 11)
case 11:
SKIP
ARITH(ADD(ENV_INT(0), 1))
STORE_ARITH(8)
LOAD_COPY(2)
STORE(9)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(8, 0)
PREPARE_PARAM_MOVE(9, 1)
CALL(4, 10)
case 10:
SKIP
RET
case 9:
SKIP
JMP(5)
case 7:
SKIP
ARITH(0)
LOAD_ARITH
RET
JMP(5)
case 5:
SKIP
case 15: /*f_add*/
SKIP
WAIT(0, 17)
case 17:
SKIP
WAIT(1, 16)
case 16:
SKIP
ARITH(ADD(ENV_INT(0), ENV_INT(1)))
LOAD_ARITH
RET
case 18: /*fold*/
SKIP
WAIT(2, 27)
case 27:
SKIP
LOAD_COPY(2)
JMP_CASE({20 COMMA 21})
case 20:
SKIP
STORE_FIELD(0,4)
STORE_FIELD(1,3)
LOAD_COPY(0)
STORE(5)
LOAD_COPY(1)
STORE(8)
LOAD_COPY(4)
STORE(9)
WAIT(0, 26)
case 26:
SKIP
LOAD_COPY(0)
ADD_PARAM_MOVE(9, 25)
case 25:
SKIP
ADD_PARAM_MOVE_FORK(8, 24)
case 24:
SKIP
STORE(6)
LOAD_COPY(3)
STORE(7)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(5, 0)
PREPARE_PARAM_MOVE(6, 1)
PREPARE_PARAM_MOVE(7, 2)
CALL(18, 23)
case 23:
SKIP
RET
JMP(19)
case 21:
SKIP
WAIT(1, 22)
case 22:
SKIP
LOAD_COPY(1)
RET
JMP(19)
case 19:
SKIP
case 28: /*map*/
SKIP
WAIT(1, 35)
case 35:
SKIP
LOAD_COPY(1)
JMP_CASE({30 COMMA 31})
case 30:
SKIP
STORE_FIELD(0,3)
STORE_FIELD(1,2)
LOAD_COPY(3)
STORE(8)
WAIT(0, 34)
case 34:
SKIP
LOAD_COPY(0)
ADD_PARAM_MOVE_FORK(8, 33)
case 33:
SKIP
STORE(4)
LOAD_COPY(0)
STORE(6)
LOAD_COPY(2)
STORE(7)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(6, 0)
PREPARE_PARAM_MOVE(7, 1)
CALL(28, 32)
case 32:
SKIP
STORE(5)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CONSTRUCT(0)
RET
JMP(29)
case 31:
SKIP
ALLOC_PARAMS(0)
CONSTRUCT(1)
RET
JMP(29)
case 29:
SKIP
case 36: /*map*/
SKIP
WAIT(1, 43)
case 43:
SKIP
LOAD_COPY(1)
JMP_CASE({38 COMMA 39})
case 38:
SKIP
STORE_FIELD(0,3)
STORE_FIELD(1,2)
LOAD_COPY(3)
STORE(8)
WAIT(0, 42)
case 42:
SKIP
LOAD_COPY(0)
ADD_PARAM_MOVE_FORK(8, 41)
case 41:
SKIP
STORE(4)
LOAD_COPY(0)
STORE(6)
LOAD_COPY(2)
STORE(7)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(6, 0)
PREPARE_PARAM_MOVE(7, 1)
CALL(36, 40)
case 40:
SKIP
STORE(5)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CONSTRUCT(0)
RET
JMP(37)
case 39:
SKIP
ALLOC_PARAMS(0)
CONSTRUCT(1)
RET
JMP(37)
case 37:
SKIP
case 44: /*natural*/
SKIP
ARITH(0)
STORE_ARITH(0)
ALLOC_PARAMS(1)
PREPARE_PARAM_MOVE(0, 0)
GLOBAL_FORK(45, 2, 6)
RET
case 45: /*naturalFrom*/
SKIP
WAIT(0, 51)
case 51:
SKIP
WAIT(1, 50)
case 50:
SKIP
ARITH(LT(ENV_INT(0), ENV_INT(1)))
JMP_IF_ZERO(46)
LOAD_COPY(0)
STORE(2)
WAIT(0, 49)
case 49:
SKIP
ARITH(ADD(1, ENV_INT(0)))
STORE_ARITH(4)
LOAD_COPY(1)
STORE(5)
ALLOC_PARAMS(6)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CALL(45, 48)
case 48:
SKIP
STORE(3)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(2, 0)
PREPARE_PARAM_MOVE(3, 1)
CONSTRUCT(0)
RET
JMP(47)
case 46:
SKIP
ALLOC_PARAMS(0)
CONSTRUCT(1)
RET
case 47:
SKIP
case 52: /*prepend*/
SKIP
LOAD_COPY(1)
STORE(2)
LOAD_COPY(0)
STORE(3)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(2, 0)
PREPARE_PARAM_MOVE(3, 1)
CONSTRUCT(0)
RET
case 53: /*queen_is_seen_by_any*/
SKIP
WAIT(3, 62)
case 62:
SKIP
LOAD_COPY(3)
JMP_CASE({55 COMMA 56})
case 55:
SKIP
STORE_FIELD(0,5)
STORE_FIELD(1,4)
LOAD_COPY(0)
STORE(6)
LOAD_COPY(1)
STORE(7)
LOAD_COPY(2)
STORE(8)
LOAD_COPY(5)
STORE(9)
ALLOC_PARAMS(4)
PREPARE_PARAM_MOVE(6, 0)
PREPARE_PARAM_MOVE(7, 1)
PREPARE_PARAM_MOVE(8, 2)
PREPARE_PARAM_MOVE(9, 3)
CALL(77, 61)
case 61:
SKIP
ARITH_LOAD_ACC
JMP_IF_ZERO(57)
ARITH(1)
LOAD_ARITH
RET
JMP(58)
case 57:
SKIP
LOAD_COPY(0)
STORE(10)
LOAD_COPY(1)
STORE(11)
WAIT(2, 60)
case 60:
SKIP
ARITH(ADD(ENV_INT(2), 1))
STORE_ARITH(12)
LOAD_COPY(4)
STORE(13)
ALLOC_PARAMS(14)
PREPARE_PARAM_MOVE(10, 0)
PREPARE_PARAM_MOVE(11, 1)
PREPARE_PARAM_MOVE(12, 2)
PREPARE_PARAM_MOVE(13, 3)
CALL(53, 59)
case 59:
SKIP
RET
case 58:
SKIP
JMP(54)
case 56:
SKIP
ARITH(0)
LOAD_ARITH
RET
JMP(54)
case 54:
SKIP
case 63: /*queens_correct*/
SKIP
WAIT(0, 76)
case 76:
SKIP
WAIT(1, 75)
case 75:
SKIP
ARITH(LT(ENV_INT(0), ENV_INT(1)))
JMP_IF_ZERO(64)
WAIT(0, 74)
case 74:
SKIP
ARITH(ADD(1, ENV_INT(0)))
STORE_ARITH(10)
LOAD_COPY(1)
STORE(11)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(10, 0)
PREPARE_PARAM_MOVE(11, 1)
GLOBAL_FORK(63, 3, 14)
STORE(4)
LOAD_COPY(2)
STORE(9)
ALLOC_PARAMS(1)
PREPARE_PARAM_MOVE(9, 0)
GLOBAL(52, 2, 4)
STORE(6)
LOAD_COPY(1)
STORE(8)
ALLOC_PARAMS(1)
CALL(44, 73)
case 73:
SKIP
ADD_PARAM_MOVE_FORK(8, 72)
case 72:
SKIP
STORE(7)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(6, 0)
PREPARE_PARAM_MOVE(7, 1)
CALL_FORK(28, 71)
case 71:
SKIP
STORE(5)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CALL_FORK(36, 70)
case 70:
SKIP
STORE(3)
ALLOC_PARAMS(4)
PREPARE_PARAM_MOVE(3, 0)
CALL(84, 69)
case 69:
SKIP
RET
JMP(67)
case 64:
SKIP
ARITH(0)
STORE_ARITH(12)
LOAD_COPY(2)
STORE(13)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(12, 0)
PREPARE_PARAM_MOVE(13, 1)
CALL(4, 68)
case 68:
SKIP
ARITH_LOAD_ACC
JMP_IF_ZERO(65)
ARITH(0)
LOAD_ARITH
RET
JMP(66)
case 65:
SKIP
ARITH(1)
LOAD_ARITH
RET
case 66:
SKIP
case 67:
SKIP
case 77: /*queens_see_each_other*/
SKIP
WAIT(0, 81)
case 81:
SKIP
WAIT(2, 80)
case 80:
SKIP
WAIT(1, 79)
case 79:
SKIP
WAIT(3, 78)
case 78:
SKIP
ARITH(OR(OR(OR(EQ(ENV_INT(0), ENV_INT(2)), EQ(ENV_INT(1), ENV_INT(3))), EQ(SUB(ENV_INT(0), ENV_INT(2)), SUB(ENV_INT(1), ENV_INT(3)))), EQ(0, ADD(SUB(ENV_INT(0), ENV_INT(2)), SUB(ENV_INT(1), ENV_INT(3))))))
LOAD_ARITH
RET
case 82: /*r*/
SKIP
ARITH(0)
STORE_ARITH(1)
LOAD_COPY(0)
STORE(2)
ALLOC_PARAMS(0)
CONSTRUCT(1)
STORE(3)
ALLOC_PARAMS(14)
PREPARE_PARAM_MOVE(1, 0)
PREPARE_PARAM_MOVE(2, 1)
PREPARE_PARAM_MOVE(3, 2)
CALL(63, 83)
case 83:
SKIP
RET
case 84: /*sum*/
SKIP
ALLOC_PARAMS(0)
GLOBAL(15, 2, 2)
STORE(1)
ARITH(0)
STORE_ARITH(2)
LOAD_COPY(0)
STORE(3)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(1, 0)
PREPARE_PARAM_MOVE(2, 1)
PREPARE_PARAM_MOVE(3, 2)
CALL(18, 85)
case 85:
SKIP
RET
case 86:
FINALIZE
default:
break;
}
}
}
#endif
