{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printcthulhu where

-- pretty-printer generated by the BNF converter

import Abscthulhu
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])



instance Print Program where
  prt i e = case e of
   RealProgram topdefs -> prPrec i 0 (concatD [prt 0 topdefs])


instance Print TopDef where
  prt i e = case e of
   FnDef id0 type' id ids expr -> prPrec i 0 (concatD [prt 0 id0 , doc (showString "::") , prt 0 type' , doc (showString ":") , prt 0 id , prt 0 ids , doc (showString "=") , prt 0 expr , doc (showString ";")])
   FnDefTemplate id0 decltemplatetypes type' id ids expr -> prPrec i 0 (concatD [prt 0 id0 , doc (showString "<") , prt 0 decltemplatetypes , doc (showString ">") , doc (showString "::") , prt 0 type' , doc (showString ":") , prt 0 id , prt 0 ids , doc (showString "=") , prt 0 expr , doc (showString ";")])
   DataTypeDef id ids datavariants -> prPrec i 0 (concatD [doc (showString "data") , prt 0 id , prt 0 ids , doc (showString "=") , prt 0 datavariants , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print DeclTemplateType where
  prt i e = case e of
   RealDeclTemplateType id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print DataVariant where
  prt i e = case e of
   RealDataVariant id datavariantfields -> prPrec i 0 (concatD [prt 0 id , prt 0 datavariantfields])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString "|") , prt 0 xs])

instance Print DataVariantField where
  prt i e = case e of
   IdDataVariantField id -> prPrec i 0 (concatD [prt 0 id])
   TypeDataVariantField type' -> prPrec i 0 (concatD [doc (showString "(") , prt 0 type' , doc (showString ")")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print SimpleType where
  prt i e = case e of
   RealSimpleType type' -> prPrec i 0 (concatD [doc (showString "(") , prt 0 type' , doc (showString ")")])
   IdSimpleType id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Type where
  prt i e = case e of
   ComplexType id simpletypes -> prPrec i 1 (concatD [prt 0 id , prt 0 simpletypes])
   FnType type'0 type' -> prPrec i 0 (concatD [prt 1 type'0 , doc (showString "->") , prt 0 type'])


instance Print TypeListElem where
  prt i e = case e of
   RealTypeListElem type' -> prPrec i 0 (concatD [prt 0 type'])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Expr where
  prt i e = case e of
   EVar id -> prPrec i 2 (concatD [prt 0 id])
   EVarTemplate id typelistelems -> prPrec i 2 (concatD [prt 0 id , doc (showString "<") , prt 0 typelistelems , doc (showString ">")])
   ELitInt n -> prPrec i 2 (concatD [prt 0 n])
   EApply expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , prt 2 expr])
   ELet id expr0 expr -> prPrec i 0 (concatD [doc (showString "let") , prt 0 id , doc (showString "=") , prt 1 expr0 , doc (showString "in") , prt 0 expr])
   EIfElse expr0 expr1 expr -> prPrec i 0 (concatD [doc (showString "if") , prt 1 expr0 , doc (showString "then") , prt 0 expr1 , doc (showString "else") , prt 0 expr])
   ECase expr casevariants -> prPrec i 0 (concatD [doc (showString "case") , prt 1 expr , doc (showString "of") , prt 0 casevariants])


instance Print CaseVariant where
  prt i e = case e of
   RealCaseVariant id ids expr -> prPrec i 0 (concatD [prt 0 id , prt 0 ids , doc (showString "->") , prt 0 expr])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])


