#ifndef CTHULHU_GEN_H_
#define CTHULHU_GEN_H_
#define START_ENV_SIZE 2
#define START_LABEL 5
#define FINAL_LABEL 37
#include "static/seq/seq.h"
void executeContext(seq::Context* context) {
while ( context != nullptr ) {
switch (context->nextInstruction) {
case 0:
SKIP// function call
ALLOC_PARAMS(0)
GLOBAL(32, 1, 5)
STORE(2)
ALLOC_PARAMS(0)
CALL(36, 4)
case 4:
SKIP
STORE(4)
LOAD_COPY(0)
STORE(5)
ALLOC_PARAMS(6)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CALL(21, 3)
case 3:
SKIP
STORE(3)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(2, 0)
PREPARE_PARAM_MOVE(3, 1)
CALL(15, 2)
case 2:
SKIP
STORE(1)
ALLOC_PARAMS(4)
PREPARE_PARAM_MOVE(1, 0)
CALL(34, 1)
case 1:
SKIP
RET
case 5:
SKIP// function entry_point
LOAD_COPY(0)
STORE(1)
ALLOC_PARAMS(6)
PREPARE_PARAM_MOVE(1, 0)
CALL(0, 6)
case 6:
SKIP
RET
case 7:
SKIP// function f_add
ARITH(ADD(ENV_INT(0), ENV_INT(1)))
LOAD_ARITH
RET
case 8:
SKIP// function fold
LOAD_COPY(2)
JMP_CASE({10 COMMA 11})
case 10:
SKIP
STORE_FIELD(0,4)
STORE_FIELD(1,3)
LOAD_COPY(0)
STORE(5)
LOAD_COPY(1)
STORE(8)
LOAD_COPY(4)
STORE(9)
LOAD_COPY(0)
ADD_PARAM_MOVE(9, 14)
case 14:
SKIP
ADD_PARAM_MOVE(8, 13)
case 13:
SKIP
STORE(6)
LOAD_COPY(3)
STORE(7)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(5, 0)
PREPARE_PARAM_MOVE(6, 1)
PREPARE_PARAM_MOVE(7, 2)
CALL(8, 12)
case 12:
SKIP
RET
JMP(9)
case 11:
SKIP
LOAD_COPY(1)
RET
JMP(9)
case 9:
SKIP
case 15:
SKIP// function map
LOAD_COPY(1)
JMP_CASE({17 COMMA 18})
case 17:
SKIP
STORE_FIELD(0,3)
STORE_FIELD(1,2)
LOAD_COPY(3)
STORE(6)
LOAD_COPY(0)
ADD_PARAM_MOVE(6, 20)
case 20:
SKIP
STORE(4)
LOAD_COPY(0)
STORE(7)
LOAD_COPY(2)
STORE(8)
ALLOC_PARAMS(9)
PREPARE_PARAM_MOVE(7, 0)
PREPARE_PARAM_MOVE(8, 1)
CALL(15, 19)
case 19:
SKIP
STORE(5)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CONSTRUCT(0)
RET
JMP(16)
case 18:
SKIP
ALLOC_PARAMS(0)
CONSTRUCT(1)
RET
JMP(16)
case 16:
SKIP
case 21:
SKIP// function replicate
ARITH(LT(ENV_INT(0), 1))
JMP_IF_ZERO(22)
ALLOC_PARAMS(0)
CONSTRUCT(1)
RET
JMP(23)
case 22:
SKIP
LOAD_COPY(1)
STORE(2)
ARITH(SUB(ENV_INT(0), 1))
STORE_ARITH(4)
LOAD_COPY(1)
STORE(5)
ALLOC_PARAMS(6)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
CALL(21, 24)
case 24:
SKIP
STORE(3)
ALLOC_PARAMS(2)
PREPARE_PARAM_MOVE(2, 0)
PREPARE_PARAM_MOVE(3, 1)
CONSTRUCT(0)
RET
case 23:
SKIP
case 25:
SKIP// function square
ARITH(LT(ENV_INT(1), ENV_INT(3)))
JMP_IF_ZERO(28)
ARITH(LT(ENV_INT(2), ENV_INT(3)))
JMP_IF_ZERO(26)
ARITH(ADD(1, ENV_INT(0)))
STORE_ARITH(4)
LOAD_COPY(1)
STORE(5)
ARITH(ADD(ENV_INT(2), 1))
STORE_ARITH(6)
LOAD_COPY(3)
STORE(7)
ALLOC_PARAMS(12)
PREPARE_PARAM_MOVE(4, 0)
PREPARE_PARAM_MOVE(5, 1)
PREPARE_PARAM_MOVE(6, 2)
PREPARE_PARAM_MOVE(7, 3)
CALL(25, 31)
case 31:
SKIP
RET
JMP(27)
case 26:
SKIP
LOAD_COPY(0)
STORE(8)
ARITH(ADD(ENV_INT(1), 1))
STORE_ARITH(9)
ARITH(0)
STORE_ARITH(10)
LOAD_COPY(3)
STORE(11)
ALLOC_PARAMS(12)
PREPARE_PARAM_MOVE(8, 0)
PREPARE_PARAM_MOVE(9, 1)
PREPARE_PARAM_MOVE(10, 2)
PREPARE_PARAM_MOVE(11, 3)
CALL(25, 30)
case 30:
SKIP
RET
case 27:
SKIP
JMP(29)
case 28:
SKIP
LOAD_COPY(0)
RET
case 29:
SKIP
case 32:
SKIP// function square_n
ARITH(0)
STORE_ARITH(1)
ARITH(0)
STORE_ARITH(2)
ARITH(0)
STORE_ARITH(3)
LOAD_COPY(0)
STORE(4)
ALLOC_PARAMS(12)
PREPARE_PARAM_MOVE(1, 0)
PREPARE_PARAM_MOVE(2, 1)
PREPARE_PARAM_MOVE(3, 2)
PREPARE_PARAM_MOVE(4, 3)
CALL(25, 33)
case 33:
SKIP
RET
case 34:
SKIP// function sum
ALLOC_PARAMS(0)
GLOBAL(7, 2, 2)
STORE(1)
ARITH(0)
STORE_ARITH(2)
LOAD_COPY(0)
STORE(3)
ALLOC_PARAMS(10)
PREPARE_PARAM_MOVE(1, 0)
PREPARE_PARAM_MOVE(2, 1)
PREPARE_PARAM_MOVE(3, 2)
CALL(8, 35)
case 35:
SKIP
RET
case 36:
SKIP// function thread_count
ARITH(4)
LOAD_ARITH
RET
case 37:
FINALIZE
default:
break;
}
}
}
#endif
